plugins {
    id 'java'
    id 'groovy'
    id "com.jfrog.bintray" version "1.8.4"
    id "com.github.spotbugs" version "3.0.0"
    id 'checkstyle'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'distribution'
}

repositories {
    maven { url "https://dl.bintray.com/omegat-org/maven/" }
    maven { url "https://repo.spring.io/plugins-release/" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
    mavenLocal()
}

group 'com.example'
version '1.0-SNAPSHOT'

ext {
    javaVersion = '1.8'
}

sourceCompatibility = 1.8

dependencies {
    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.json:json:20160810'
    compile group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
    compile fileTree(dir: 'lib', include: '*.jar')
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.mitre:jfastbpe:1.0-SNAPSHOT'
    compileOnly 'org.omegat:omegat:4.3.0'
    compileOnly 'commons-io:commons-io:2.5'
    compileOnly 'commons-lang:commons-lang:2.6'
    compile group: 'org.apache.opennlp', name: 'opennlp-tools', version: '1.9.2'
    testImplementation 'org.omegat:omegat:4.3.0'
    testImplementation 'commons-io:commons-io:2.4'
    testImplementation 'commons-lang:commons-lang:2.6'
    testImplementation "org.codehaus.groovy:groovy-all:3.0.1"
    testImplementation 'org.testng:testng:6.9.10'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    compile 'org.mitre:jfairseq:1.0-SNAPSHOT'
}

test.useTestNG()

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes("OmegaT-Plugins": "org.mitre.pinball.omegat.pytorch.FairseqMachineTranslation")
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

tasks.withType(Checkstyle) {
    exclude('**/dialog/FairseqTranslationOptionDialog.java')
}

spotless {
    enforceCheck false
    java {
        removeUnusedImports()
    }
}


tasks.withType(com.github.spotbugs.SpotBugsTask) {
    ignoreFailures = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
}

distTar {
    compression = Compression.GZIP
}
