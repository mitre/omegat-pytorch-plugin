package org.mitre.pinball.omegat.pytorch.dialog;

import org.mitre.pinball.omegat.pytorch.PyTorchMachineTranslationOptions;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;

public class PyTorchTranslationOptionDialog extends JDialog {
    private JButton selectModelDirectoryButton;
    private JFileChooser chooser;
    private JPanel contentPane;
    private JButton cancelButton;
    private File modelDirectory;

    private boolean updated;

    private static final File DEFAULT_FILECHOOSER_DIR = new File(System.getProperty("user.home"));

    private static final Logger LOGGER = LoggerFactory
            .getLogger(PyTorchTranslationOptionDialog.class);


    private JFileChooser initJFileChooser(final File dir) {
        JFileChooser chooser = new JFileChooser(dir);
        // Disable multiple directories
        chooser.setMultiSelectionEnabled(false);
        // Only allow directories to be selected.
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        return chooser;
    }

    public PyTorchTranslationOptionDialog(Window parent) {
        updated = false;
        setContentPane(contentPane);
        setModal(true);
        modelDirectory = DEFAULT_FILECHOOSER_DIR;
        getRootPane().setDefaultButton(selectModelDirectoryButton);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        chooser = initJFileChooser(modelDirectory);
        selectModelDirectoryButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int ret = chooser.showOpenDialog(parent);
                if (ret == JFileChooser.APPROVE_OPTION) {
                    modelDirectory = chooser.getSelectedFile();
                    updated = true;
                    dispose();
                }
            }
        });
        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        cancelButton.addActionListener(e -> onCancel());
    }

    public void setData(final PyTorchMachineTranslationOptions options) {
        this.modelDirectory = options.getModelDirectory();
    }

    public void getData(final PyTorchMachineTranslationOptions options) {
        options.setModelDirectory(modelDirectory);
    }

    public boolean isModified(final PyTorchMachineTranslationOptions options) {
        if (!updated) {
            return false;
        }

        if (modelDirectory != null) {
            return !modelDirectory.equals(options.getModelDirectory());
        } else {
            return options.getModelDirectory() != null;
        }

    }

    private void onCancel() {
        dispose();
    }

    private void createUIComponents() {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        selectModelDirectoryButton = new JButton();
        selectModelDirectoryButton.setText("Select Model Directory");
        contentPane.add(selectModelDirectoryButton, new GridConstraints(0, 1, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(0, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        contentPane.add(cancelButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
